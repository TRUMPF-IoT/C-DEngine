<!--
 SPDX-FileCopyrightText: 2009-2022 TRUMPF Laser GmbH, authors: C-Labs
 SPDX-License-Identifier: MPL-2.0
 -->
<Project>

  <PropertyGroup>
    <GitVersionTaskExcludedProjects Condition="'$(GitVersionTaskExcludedProjects)' == ''">CertIssuerWeb;docker-compose;ActivationKeyPurchase;CDMyPowerMeter</GitVersionTaskExcludedProjects> <!-- Performance optimization: only look at certain package references -->
    <GitVersionTaskExcluded>$(GitVersionTaskExcludedProjects.Contains($(ProjectName)))</GitVersionTaskExcluded>
    <WriteVersionInfoToBuildLog>false</WriteVersionInfoToBuildLog> <!-- Prevent the Azure DevOps build number to be written twice and forced to semver: should only be done by gitversion task in the build pipeline -->

    <!-- uncomment to build locally with bet nugets. For github build, add a pre-release tag (5.123.0-beta.1) to your branch -->
    <!--<cdeUsePrereleasePackages>true</cdeUsePrereleasePackages>--> 
  </PropertyGroup>
  
  <!-- GitVersion-based auto-versioning -->
  <ItemGroup Condition="'$(GitVersionTaskExcluded)' != 'True'" >
    <PackageReference Include="GitVersion.MsBuild" Version="5.6.6">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup Condition="'$(cdeUsePrereleasePackages)' == 'true'"> 
    <PackageReference Update="C-DEngine" Version="5.*-*" />
    <PackageReference Update="cdeASPNet" Version="5.*-*" />
    <PackageReference Update="cdeIIS" Version="5.*-*" />
    <PackageReference Update="cdePackager" Version="5.*-*" />
    <PackageReference Update="cdePackagerTask" Version="5.*-*" />

    <PackageReference Update="CDMyNMIHtml5RT" Version="5.*-*" />

    <PackageReference Update="cdeThingMatcherShared" Version="5.*-*" />
    <PackageReference Update="cdeSensorTemplateShared" Version="5.*-*" />
    <PackageReference Update="cdeSenderBaseShared" Version="5.*-*" />
    <PackageReference Update="cdeReceiverBaseShared" Version="5.*-*" />
    <PackageReference Update="cdeOPCUAClientContractsShared" Version="5.*-*" />
    <PackageReference Update="cdeOPCUAClientAPIShared" Version="5.*-*" />
    <PackageReference Update="cdeLicenseTool" Version="5.*-*" />
    <PackageReference Update="cdeEventConvertersShared" Version="5.*-*" />
    <PackageReference Update="cdeConnectionBaseShared" Version="5.*-*" />
    <PackageReference Update="cdeCommonMessageContractsShared" Version="5.*-*" />
    <PackageReference Update="cdeCSVFileParserShared" Version="5.*-*" />
    <PackageReference Update="cdeMeshManagerContractsShared" Version="5.*-*" />
    <PackageReference Update="cdeOPCUAClientAPIShared" Version="5.*-*" />
    <PackageReference Update="cdeTelnetShared" Version="5.*-*" />
  </ItemGroup>
  
  <!-- Package to  Project replacement: Based on https://github.com/dotnet/sdk/issues/1151#issuecomment-459275750 -->
  <PropertyGroup>
    <ReplacePackageReferences Condition="'$(ReplacePackageReferences)' == ''">true</ReplacePackageReferences>
    <PackageReferenceFilter Condition="'$(PackageReferenceFilter)' == ''"></PackageReferenceFilter> <!-- Performance optimization: only look at certain package references -->
    <ReplaceProjectReferences Condition="'$(ReplaceProjectReferences)' == ''">false</ReplaceProjectReferences>
   </PropertyGroup>

  <!-- MarkusH 2020/02/10: nuget restore does not set a proper solution path: fix it up -->
  <PropertyGroup Condition=" ('$(SolutionPath)' == '' OR !Exists('$(SolutionPath)'))AND  '$(SolutionDir)' != '' AND '$(SolutionDir)' != '*undefined*' ">
	  <SolutionPath>$(SolutionDir)$(SolutionName).SLN</SolutionPath>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(SolutionPath)' != '' AND '$(SolutionPath)' != '*undefined*' AND Exists('$(SolutionPath)') AND '$(GitVersionTaskExcluded)' != 'True'" >
      <PropertyGroup>
        <!-- <SolutionFileContent>$([System.IO.File]::ReadAllText($(SolutionPath)))</SolutionFileContent> --> <!-- Markush: 2020/02/10: This exhausts memory for large SLN files: read multiple times - less efficient but preserves memory-->
        <SmartSolutionDir>$([System.IO.Path]::GetDirectoryName( $(SolutionPath) ))</SmartSolutionDir>
        <RegexPattern>(?&lt;="[PackageName]", ")(.*)(?=", ")</RegexPattern>
        <HasSolution>true</HasSolution>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <HasSolution>false</HasSolution>
      </PropertyGroup>
    </Otherwise>
  </Choose>
  <Choose>
    <When Condition="$(ReplacePackageReferences) AND $(HasSolution)">
      <ItemGroup>
        <!-- Keep the identity of the  packagereference -->
        <SmartPackageReference Include="@(PackageReference)">
          <PackageName>%(Identity)</PackageName> 
          <InSolution>false</InSolution>
          <InSolution Condition = " '$(PackageReferenceFilter)' == '' OR '$(PackageReferenceFilter.Contains(%(Identity)))' == 'True' ">$([System.IO.File]::ReadAllText($(SolutionPath)).Contains('\%(Identity).csproj'))</InSolution>
        </SmartPackageReference>

        <!-- Filter them by mapping them to another itemGroup using the WithMetadataValue item function -->
        <PackageInSolution Include="@(SmartPackageReference -> WithMetadataValue('InSolution', True) )">
          <Pattern>$(RegexPattern.Replace('[PackageName]','%(PackageName)') )</Pattern>
          <SmartPath>$([System.Text.RegularExpressions.Regex]::Match( '$([System.IO.File]::ReadAllText($(SolutionPath)))', '%(Pattern)' ))</SmartPath>
        </PackageInSolution>

        <ProjectReference  Include="@(PackageInSolution -> '$(SmartSolutionDir)\%(SmartPath)' )"/>

        <!-- Remove the package references that are now referenced as projects -->
        <PackageReference Remove="@(PackageInSolution -> '%(PackageName)' )"/>
      </ItemGroup>
    </When>
    <When Condition="$(ReplaceProjectReferences) AND '$(_RestoreSolutionFileUsed)' == ''">
      <ItemGroup>

        <!-- Keep the identity of the  project reference (relative path), determine the project name and whether the project is contained in the current solution -->
        <SmartProjectReference Include="@(ProjectReference)">
          <OriginalIdentity>%(Identity)</OriginalIdentity>
          <ProjectName>$([System.IO.Path]::GetFileNameWithoutExtension( $([System.IO.Path]::GetFullPath( '%(OriginalIdentity)' )) ))</ProjectName>
          <InSolution>$([System.IO.File]::ReadAllText($(SolutionPath)).Contains('\%(ProjectName).csproj'))</InSolution>
        </SmartProjectReference>

        <!-- Filter them by mapping them to another itemGroup using the WithMetadataValue item function -->
        <ProjectNotInSolution Include="@(SmartProjectReference -> WithMetadataValue('InSolution', False) )">
        </ProjectNotInSolution>

        <!--Reference the latest version of the package (why not * ? > see https://github.com/NuGet/Home/issues/7328-->
        <PackageReference  Include="@(ProjectNotInSolution -> '%(ProjectName)' )" Version="[*,9999.0]"/>

        <!-- Remove the project references that are now referenced as packages -->
        <ProjectReference Remove="@(ProjectNotInSolution -> '%(OriginalIdentity)' )"/>
      </ItemGroup>

    </When>
   </Choose>

</Project>
